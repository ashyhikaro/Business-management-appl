{"version":3,"file":"static/js/723.e9c68085.chunk.js","mappings":"6KAwGA,UApGA,SAAwB,GAAmB,IAAlBA,EAAO,EAAPA,QAASC,EAAK,EAALA,MAExBC,EAAYF,GAAWC,EAAQD,EAAQG,KAAI,SAACC,GAAI,OAAKA,EAAKC,GAAG,IAAEC,OAAOL,EAAME,KAAI,SAACC,GAAI,OAAKA,EAAKC,GAAG,KAAGE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,IAC3HT,IAAYC,EAAQD,EAAQG,KAAI,SAACC,GAAI,OAAKA,EAAKC,GAAG,KAC7CL,GAAWC,EAAQA,EAAME,KAAI,SAACC,GAAI,OAAKA,EAAKC,GAAG,IAAI,GAExDK,EAAaV,EAAUA,EAAQO,MAAK,SAACI,EAAOC,GAAK,OAAKD,EAAMN,IAAMO,EAAMP,GAAG,IAAI,GAC/EQ,EAAWZ,EAAQA,EAAMM,MAAK,SAACI,EAAOC,GAAK,OAAKD,EAAMN,IAAMO,EAAMP,GAAG,IAAI,GAE7E,SAASS,EAAUC,GAGf,IAFA,IAAIC,EAAMD,EAEDE,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IACxBf,EAAUe,KAAOD,EAAIC,GAAGZ,KACxBW,EAAIG,OAAOF,EAAG,EAAG,CAACG,GAAI,GAAIf,IAAKH,EAAUe,GAAII,SAAU,EAAGC,SAAU,IAI5E,OAAON,CACX,CAEA,IAAIO,EAAmBvB,EAAUc,EAAUJ,GAAYH,MAAK,SAACI,EAAOC,GAAK,OAAKD,EAAMN,IAAMO,EAAMP,GAAG,IAAEF,KAAI,SAACC,GAAI,OAAKA,EAAKiB,QAAQ,IAAI,GAChIG,EAAiBvB,EAAQa,EAAUD,GAAUN,MAAK,SAACI,EAAOC,GAAK,OAAKD,EAAMN,IAAMO,EAAMP,GAAG,IAAEF,KAAI,SAACC,GAAI,OAAKA,EAAKkB,QAAQ,IAAI,GAE9H,GAAIpB,EAAUgB,OAASK,EAAiBL,OAAQ,CAC7BhB,EAAUgB,OAASK,EAAiBL,OACnDhB,EAAUiB,OAAOI,EAAiBL,OAAQ,EAC9C,CAEA,OAAkCO,EAAAA,EAAAA,UAAS,CACvCC,OAAQxB,EACRyB,SAAU,CACN,CACIC,MAAO,mDACPxB,KAAMmB,EACNM,gBAAiB,CACb,wBAEJC,YAAa,sBACbC,YAAa,GAEjB,CACIH,MAAO,yDACPxB,KAAMoB,EACNK,gBAAiB,CACb,wBAEJC,YAAa,uBACbC,YAAa,MAGvB,eAtBKC,EAAS,KAAEC,EAAY,KAkD9B,OA1BAC,EAAAA,EAAAA,YAAU,WACND,EAAa,CACTP,OAAQxB,EACRyB,SAAU,CACN,CACIC,MAAO,mDACPxB,KAAMmB,EACNM,gBAAiB,CACb,wBAEJC,YAAa,uBACbC,YAAa,GAEjB,CACIH,MAAO,yDACPxB,KAAMoB,EACNK,gBAAiB,CACb,wBAEJC,YAAa,uBACbC,YAAa,KAI7B,GAAG,CAAC/B,EAASC,KAGT,iBAAKkC,UAAU,2BAA0B,WACrC,eAAIC,MAAO,CAAEC,UAAW,UAAW,yKACnC,mBACA,SAAC,KAAI,CACDjC,KAAM4B,EACNM,QAAS,CACLC,QAAS,CACLC,MAAO,CACHC,SAAS,GAEbC,OAAQ,CACJD,SAAS,SAOrC,C","sources":["components/graphics/MixedLineChart.js"],"sourcesContent":["import Chart from 'chart.js/auto';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction MixedLineChart({incomes, costs}) {\r\n\r\n    const labelsArr = incomes && costs ? incomes.map((data) => data.day).concat(costs.map((data) => data.day)).sort((a, b) => a - b) :\r\n        incomes && !costs ? incomes.map((data) => data.day) :\r\n            !incomes && costs ? costs.map((data) => data.day) : []\r\n\r\n    let incomesArr = incomes ? incomes.sort((item1, item2) => item1.day - item2.day) : []\r\n    let costsArr = costs ? costs.sort((item1, item2) => item1.day - item2.day) : []\r\n\r\n    function sortArray(arrayFinance) {\r\n        let arr = arrayFinance\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (labelsArr[i] !== arr[i].day) {\r\n                arr.splice(i, 0, {id: '', day: labelsArr[i], userGain: 0, userLost: 0})\r\n            }\r\n        }\r\n\r\n        return arr\r\n    }\r\n\r\n    let incomesArrSorted = incomes ? sortArray(incomesArr).sort((item1, item2) => item1.day - item2.day).map((data) => data.userGain) : []\r\n    let costsArrSorted = costs ? sortArray(costsArr).sort((item1, item2) => item1.day - item2.day).map((data) => data.userLost) : []\r\n\r\n    if (labelsArr.length > incomesArrSorted.length) {\r\n        let riznucya = labelsArr.length - incomesArrSorted.length\r\n        labelsArr.splice(incomesArrSorted.length, 2)\r\n    }\r\n\r\n    const [chartData, setChartData] = useState({\r\n        labels: labelsArr, \r\n        datasets: [\r\n            {\r\n                label: \"Отримано\",\r\n                data: incomesArrSorted,\r\n                backgroundColor: [\r\n                    \"rgba(0, 0, 255, 0.8)\",\r\n                ],\r\n                borderColor: \"rgba(0, 0, 255, 0.)\",\r\n                borderWidth: 3\r\n            },\r\n            {\r\n                label: \"Витрачено\",\r\n                data: costsArrSorted,\r\n                backgroundColor: [\r\n                    \"rgba(255, 0, 0, 0.8)\",\r\n                ],\r\n                borderColor: \"rgba(255, 0, 0, 0.5)\",\r\n                borderWidth: 3\r\n            }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        setChartData({\r\n            labels: labelsArr, \r\n            datasets: [\r\n                {\r\n                    label: \"Отримано\",\r\n                    data: incomesArrSorted,\r\n                    backgroundColor: [\r\n                        \"rgba(0, 0, 255, 0.8)\",\r\n                    ],\r\n                    borderColor: \"rgba(0, 0, 255, 0.7)\",\r\n                    borderWidth: 3\r\n                },\r\n                {\r\n                    label: \"Витрачено\",\r\n                    data: costsArrSorted,\r\n                    backgroundColor: [\r\n                        \"rgba(255, 0, 0, 0.8)\",\r\n                    ],\r\n                    borderColor: \"rgba(255, 0, 0, 0.7)\",\r\n                    borderWidth: 3\r\n                }\r\n            ]\r\n        })\r\n    }, [incomes, costs])\r\n\r\n    return (\r\n        <div className=\"mixedline_chart_finances\">\r\n            <h2 style={{ textAlign: \"center\" }}>Прибутки та витрати за місяць</h2>\r\n            <br />\r\n            <Line\r\n                data={chartData}\r\n                options={{\r\n                    plugins: {\r\n                        title: {\r\n                            display: false,\r\n                        },\r\n                        legend: {\r\n                            display: false\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MixedLineChart;"],"names":["incomes","costs","labelsArr","map","data","day","concat","sort","a","b","incomesArr","item1","item2","costsArr","sortArray","arrayFinance","arr","i","length","splice","id","userGain","userLost","incomesArrSorted","costsArrSorted","useState","labels","datasets","label","backgroundColor","borderColor","borderWidth","chartData","setChartData","useEffect","className","style","textAlign","options","plugins","title","display","legend"],"sourceRoot":""}