{"version":3,"file":"static/js/479.1e0eb4ff.chunk.js","mappings":"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","sources":["components/user-components/forms/financeForm.js"],"sourcesContent":["import 'react-datalist-input/dist/styles.css';\r\nimport '../../../styles/forms/form.scss';\r\nimport '../../../styles/forms/finance-form.scss';\r\n\r\nimport { useEffect } from 'react';\r\nimport DatalistInput, { useComboboxControls } from 'react-datalist-input';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useState } from 'react';\r\n\r\nimport { db } from \"../../../index\";\r\n\r\nfunction FinanceForm({regime, userData, openForm, mode, usersNoteId}) {\r\n    const { register, reset, handleSubmit, formState, formState: { errors, isSubmitSuccessful } } = useForm();\r\n    const { setValue, value } = useComboboxControls();\r\n    const [currency, setCurrency] = useState('')\r\n\r\n    let oldNote\r\n    \r\n    if (mode === 'edit') {\r\n        db.ref(regime).child(userData.id).child(usersNoteId).once('value', function(elem) {\r\n            oldNote = elem.val()\r\n        });\r\n    }\r\n\r\n    const now = new Date()\r\n    const month = now.getMonth() + 1\r\n    const day = now.getDate()\r\n\r\n    const dateObj = {\r\n        day: String(day).length === 1 ? `0${day}` : day,\r\n        month: String(month).length === 1 ? `0${month}` : month,\r\n        year: now.getFullYear(),\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        const dateOfTrans = data.date.split('-')\r\n\r\n        let newDBObject = {\r\n            ...data,\r\n            id: `${Date.now()}`, \r\n            date: `${dateOfTrans[2]}-${dateOfTrans[1]}-${dateOfTrans[0]}`\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            if (!value) {\r\n                regime === 'income' ? \r\n                    newDBObject = {\r\n                        ...newDBObject,\r\n                        value: 'За товар / послугу',\r\n                    } :\r\n                    newDBObject = {\r\n                        ...newDBObject, \r\n                        value: 'Телефон / інтернет', \r\n                    }\r\n            } else {\r\n                newDBObject = {\r\n                    ...newDBObject, \r\n                    value,\r\n                }\r\n            }\r\n        } else {\r\n            newDBObject = {\r\n                ...newDBObject, \r\n                value,\r\n            }\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            currency === '' ? newDBObject = {...newDBObject, curr: 'UAH',} : newDBObject = {...newDBObject, curr: currency,}\r\n        } else {\r\n            newDBObject = {...newDBObject, curr: currency,}\r\n        }\r\n\r\n        const now = new Date()\r\n        const month = now.getMonth() + 1\r\n        const day = now.getDate()\r\n\r\n        const nowObj = {\r\n            day: String(day).length === 1 ? `0${day}` : day,\r\n            month: String(month).length === 1 ? `0${month}` : month,\r\n            year: now.getFullYear(),\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            db.ref(regime).child(userData.id).update({\r\n                [newDBObject.id] : {\r\n                    DateOfCreation: `${nowObj.day}-${nowObj.month}-${nowObj.year}`,\r\n                    DateOfDBInput: now,\r\n                    Date: newDBObject.date,\r\n                    Value: newDBObject.sum,\r\n                    Currency: newDBObject.curr,\r\n                    Type: newDBObject.value,\r\n                    Project: newDBObject.project ? newDBObject.project : '',\r\n                }\r\n            })\r\n        } else {\r\n\r\n            db.ref(regime).child(userData.id).update({\r\n                [usersNoteId] : {\r\n                    DateOfCreation: oldNote.DateOfCreation,\r\n                    DateOfDBInput: oldNote.DateOfDBInput,\r\n                    Date: newDBObject.date && newDBObject.date !== 'undefined-undefined-' ? newDBObject.date : oldNote.Date,\r\n                    Value: newDBObject.sum ? newDBObject.sum : oldNote.Value,\r\n                    Currency: newDBObject.curr ? newDBObject.curr : oldNote.Currency,\r\n                    Type: newDBObject.value ? newDBObject.value : oldNote.Type,\r\n                    Project: newDBObject.project ? newDBObject.project : oldNote.Project,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (formState.isSubmitSuccessful) {\r\n            reset({ date: '', sum: '', project: '',});\r\n            setValue('')\r\n            setCurrency('')\r\n        }\r\n    }, [formState, reset, setValue])\r\n\r\n    return (\r\n        <>  \r\n            <Form onSubmit={handleSubmit(onSubmit)} className='finance__form form_hiden'>\r\n                {regime === 'income' ? \r\n                    <h2>{mode === 'create' ? 'Додати' : 'Редагувати'} прибуток</h2> \r\n                : \r\n                    <h2>{mode === 'create' ? 'Додати' : 'Редагувати'} витрати</h2>\r\n                }\r\n\r\n                <Form.Field>\r\n                    <label>Дата платежу:</label>\r\n                    {mode === 'create' ? \r\n                        <input  \r\n                            type=\"date\"\r\n                            {...register('date', {\r\n                                required: 'error date',\r\n                                max: `${dateObj.year + 5}-${dateObj.month}-${dateObj.day}`,\r\n                                min: `${dateObj.year - 5}-${dateObj.month}-${dateObj.day}`,\r\n                            })}\r\n                        />\r\n                    :   \r\n                        <input \r\n                            {...register('date', {\r\n                                required: false,\r\n                                max: `${dateObj.year + 5}-${dateObj.month}-${dateObj.day}`,\r\n                                min: `${dateObj.year - 5}-${dateObj.month}-${dateObj.day}`,\r\n                            })}\r\n                            placeholder={oldNote.Date}\r\n                            type=\"text\"\r\n                            onFocus={(e) => e.target.type='date'}\r\n                            onBlur={(e) => e.target.type = \"text\"}\r\n                        /> \r\n                    }\r\n                    {errors.date && <p className='error_message'>*Заповніть поле</p>}\r\n                </Form.Field>\r\n\r\n                <Form.Field style={{display: 'flex', alignItems: 'flex-end', gap: '10px', marginBottom: '0'}}>\r\n                    <Form.Field>\r\n                        <label>Сума платежу:</label>\r\n                        {mode === 'create' ? \r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder='Сума...'\r\n                                {...register('sum', {\r\n                                    required: 'error value'\r\n                                })}\r\n                                min={1}\r\n                                max={1000000000}\r\n                            />\r\n                        :   \r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder={oldNote.Value}\r\n                                {...register('sum', {\r\n                                    required: false,\r\n                                })}\r\n                                min={1}\r\n                                max={1000000000}\r\n                            />\r\n                        }\r\n                        {errors.sum && <p className='error_message'>*Заповніть поле</p>}\r\n                    </Form.Field>\r\n\r\n                    <Form.Field>\r\n                        {mode === 'create' ?\r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={currency}\r\n                                setValue={setCurrency}\r\n                                placeholder=\"UAH\"\r\n                                items={[\r\n                                    { id: 'UAH', value: 'UAH' },\r\n                                    { id: 'USD', value: 'USD' },\r\n                                    { id: 'EUR', value: 'EUR' },\r\n                                    { id: 'GBP', value: 'GBP' },\r\n                                    { id: 'JPY', value: 'JPY' },\r\n                                    { id: 'CNY', value: 'CNY' },\r\n                                ]}\r\n                            />\r\n                        :\r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={currency}\r\n                                setValue={setCurrency}\r\n                                placeholder={oldNote.Currency}\r\n                                items={[\r\n                                    { id: 'UAH', value: 'UAH' },\r\n                                    { id: 'USD', value: 'USD' },\r\n                                    { id: 'EUR', value: 'EUR' },\r\n                                    { id: 'GBP', value: 'GBP' },\r\n                                    { id: 'JPY', value: 'JPY' },\r\n                                    { id: 'CNY', value: 'CNY' },\r\n                                ]}\r\n                            />\r\n                        }\r\n                        {errors.sum && <p className='error_message'>&nbsp;</p>}\r\n                    </Form.Field>\r\n                </Form.Field>\r\n\r\n                \r\n\r\n                <Form.Field>\r\n                    <label>Категорія:</label>\r\n                    \r\n                    {mode === 'create' ?\r\n                        regime === 'income' ? \r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={value}\r\n                                setValue={setValue}\r\n                                placeholder=\"За товар / послугу\"\r\n                                items={[\r\n                                    {id: 'Payment', value: 'За товар / послугу'},\r\n                                    {id: 'Prepayment', value: 'Передоплата'},\r\n                                    {id: 'Another', value: 'Інші надходження'},\r\n                                ]}\r\n                            /> :\r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={value}\r\n                                setValue={setValue}\r\n                                placeholder=\"Телефон / інтернет\"\r\n                                items={[\r\n                                    {id: 'Connection', value: 'Телефон / інтернет'},\r\n                                    {id: 'Suppliers', value: 'Оплата постачальникам'},\r\n                                    {id: 'Rent', value: 'Оренда'},\r\n                                    {id: 'Taxes', value: 'Податки'},\r\n                                    {id: 'Salary', value: 'Заробітна плата'},\r\n                                    {id: 'Another payments', value: 'Інші виплати'},\r\n                                ]}\r\n                            />\r\n                        :\r\n                        regime === 'income' ? \r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={value}\r\n                                setValue={setValue}\r\n                                placeholder={oldNote.Type}\r\n                                items={[\r\n                                    {id: 'Payment', value: 'За товар / послугу'},\r\n                                    {id: 'Prepayment', value: 'Передоплата'},\r\n                                    {id: 'Another', value: 'Інші надходження'},\r\n                                ]}\r\n                            /> :\r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={value}\r\n                                setValue={setValue}\r\n                                placeholder={oldNote.Type}\r\n                                items={[\r\n                                    {id: 'Connection', value: 'Телефон / інтернет'},\r\n                                    {id: 'Suppliers', value: 'Оплата постачальникам'},\r\n                                    {id: 'Rent', value: 'Оренда'},\r\n                                    {id: 'Taxes', value: 'Податки'},\r\n                                    {id: 'Salary', value: 'Заробітна плата'},\r\n                                    {id: 'Another payments', value: 'Інші виплати'},\r\n                                ]}\r\n                            />\r\n                    }\r\n                    \r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                    <label>Проєкт:</label>\r\n                    {mode === 'create' ? \r\n                        <input  \r\n                            type=\"text\"\r\n                            placeholder='Проєкт...'\r\n                            {...register('project')}\r\n                            maxLength=\"30\"\r\n                        /> \r\n                    :\r\n                        <input  \r\n                            type=\"text\"\r\n                            placeholder={oldNote.Project}\r\n                            {...register('project')}\r\n                            maxLength=\"30\"\r\n                        /> \r\n                    }\r\n                    \r\n                </Form.Field>\r\n\r\n                <Form.Field className='btns_field'>\r\n                    <Button className='non_active_btn' onClick={() => {setValue(''); openForm('back')}} type='reset'>Назад</Button>\r\n                    <Button className='sign-in_btn' type='submit'>{mode === 'create' ? 'Створити' : 'Зберегти'}</Button>\r\n                </Form.Field>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n  \r\nexport default FinanceForm;"],"names":["oldNote","regime","userData","openForm","mode","usersNoteId","useForm","register","reset","handleSubmit","formState","errors","isSubmitSuccessful","useComboboxControls","setValue","value","useState","currency","setCurrency","db","child","id","once","elem","val","now","Date","month","getMonth","day","getDate","dateObj","String","length","year","getFullYear","useEffect","date","sum","project","onSubmit","data","dateOfTrans","split","newDBObject","curr","nowObj","update","DateOfCreation","DateOfDBInput","Value","Currency","Type","Project","className","type","required","max","min","placeholder","onFocus","e","target","onBlur","style","display","alignItems","gap","marginBottom","marginTop","items","maxLength","onClick"],"sourceRoot":""}