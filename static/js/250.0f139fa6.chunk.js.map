{"version":3,"file":"static/js/250.0f139fa6.chunk.js","mappings":"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","sources":["components/user-components/forms/loanForm.js"],"sourcesContent":["import 'react-datalist-input/dist/styles.css';\r\nimport '../../../styles/forms/form.scss';\r\nimport '../../../styles/forms/finance-form.scss';\r\n\r\nimport { useEffect } from 'react';\r\nimport DatalistInput, { useComboboxControls } from 'react-datalist-input';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useState } from 'react';\r\n\r\nimport { db } from \"../../../index\";\r\n\r\nfunction LoanForm({userData, openForm, mode, usersNoteId}) {\r\n    const { register, reset, handleSubmit, formState, formState: { errors, isSubmitSuccessful } } = useForm();\r\n    const { setValue, value } = useComboboxControls();\r\n    const [currency, setCurrency] = useState('')\r\n\r\n    const now = new Date()\r\n    const month = now.getMonth() + 1\r\n    const day = now.getDate()\r\n\r\n    const dateObj = {\r\n        day: String(day).length === 1 ? `0${day}` : day,\r\n        month: String(month).length === 1 ? `0${month}` : month,\r\n        year: now.getFullYear(),\r\n    }\r\n\r\n    let oldNote\r\n    \r\n    if (mode === 'edit') {\r\n        db.ref('loans').child(userData.id).child(usersNoteId).once('value', function(elem) {\r\n            oldNote = elem.val()\r\n        });\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        const dateOfTrans = data.date.split('-')\r\n\r\n        let newDBObject = {\r\n            ...data,\r\n            id: `${Date.now()}`, \r\n            date: `${dateOfTrans[2]}-${dateOfTrans[1]}-${dateOfTrans[0]}`\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            if (!value) {\r\n                newDBObject = {\r\n                    ...newDBObject,\r\n                    value: 'Дебет',\r\n                }\r\n            } else {\r\n                newDBObject = {\r\n                    ...newDBObject, \r\n                    value,\r\n                }\r\n            }\r\n        } else {\r\n            newDBObject = {\r\n                ...newDBObject, \r\n                value,\r\n            }\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            currency === '' ? newDBObject = {...newDBObject, curr: 'UAH',} : newDBObject = {...newDBObject, curr: currency,}\r\n        } else {\r\n            newDBObject = {...newDBObject, curr: currency,}\r\n        }\r\n\r\n        const now = new Date()\r\n        const month = now.getMonth() + 1\r\n        const day = now.getDate()\r\n\r\n        const nowObj = {\r\n            day: String(day).length === 1 ? `0${day}` : day,\r\n            month: String(month).length === 1 ? `0${month}` : month,\r\n            year: now.getFullYear(),\r\n        }\r\n\r\n        if (mode === 'create') {\r\n            db.ref('loans').child(userData.id).update({\r\n                [newDBObject.id] : {\r\n                    DateOfCreation: `${nowObj.day}-${nowObj.month}-${nowObj.year}`,\r\n                    DateOfDBInput: now,\r\n                    Date: newDBObject.date,\r\n                    DateMonth: newDBObject.dateMonth,\r\n                    Value: newDBObject.sum,\r\n                    ValueMonth: newDBObject.sumMonth,\r\n                    Currency: newDBObject.curr,\r\n                    Type: newDBObject.value,\r\n                    Name: newDBObject.name ? newDBObject.name : '',\r\n                    PaidOut: false,\r\n                }\r\n            })\r\n        } else {\r\n            db.ref('loans').child(userData.id).update({\r\n                [usersNoteId] : {\r\n                    DateOfCreation: oldNote.DateOfCreation,\r\n                    DateOfDBInput: oldNote.DateOfDBInput,\r\n                    Date: newDBObject.date && newDBObject.date !== 'undefined-undefined-' ? newDBObject.date : oldNote.Date,\r\n                    DateMonth: newDBObject.dateMonth ? newDBObject.dateMonth : oldNote.dateMonth,\r\n                    Value: newDBObject.sum ? newDBObject.sum : oldNote.Value,\r\n                    ValueMonth: newDBObject.sumMonth ? newDBObject.sumMonth : oldNote.ValueMonth,\r\n                    Currency: newDBObject.curr ? newDBObject.curr : oldNote.Currency,\r\n                    Type: newDBObject.value ? newDBObject.value : oldNote.Type,\r\n                    Name: newDBObject.name ? newDBObject.name : oldNote.Name,\r\n                    PaidOut: oldNote.PaidOut,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (formState.isSubmitSuccessful) {\r\n            reset({ date: '', sum: '', name: '', dateMonth: '', sumMonth: ''});\r\n            setValue('')\r\n            setCurrency('')\r\n        }\r\n    }, [formState, reset, setValue])\r\n\r\n    return (\r\n        <>  \r\n            <Form onSubmit={handleSubmit(onSubmit)} className='finance__form form_hiden'>\r\n                <h2>{mode === 'create' ? 'Додати' : 'Редагувати'} депозит</h2>\r\n\r\n                <Form.Field>\r\n                    <label>Ім'я / компанія:</label>\r\n                    {mode === 'create' ? \r\n                        <input  \r\n                            type=\"text\"\r\n                            placeholder=\"Ім'я...\"\r\n                            {...register('name', {\r\n                                required: 'error value'\r\n                            })}\r\n                            maxLength=\"30\"\r\n                        /> \r\n                    : \r\n                        <input  \r\n                            type=\"text\"\r\n                            placeholder={oldNote.Name}\r\n                            {...register('name', {\r\n                                required: false\r\n                            })}\r\n                            maxLength=\"30\"\r\n                        /> \r\n                    }\r\n                    {errors.name && <p className='error_message'>*Заповніть поле</p>}\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                    <label>Категорія:</label>\r\n\r\n                    {mode === 'create' ?\r\n                        <DatalistInput\r\n                            value={value}\r\n                            setValue={setValue}\r\n                            placeholder=\"Дебет\"\r\n                            items={[\r\n                                {id: 'In', value: 'Дебет'},\r\n                                {id: 'Out', value: 'Кредит'},\r\n                            ]}\r\n                        /> :\r\n                        <DatalistInput\r\n                            value={value}\r\n                            setValue={setValue}\r\n                            placeholder={oldNote.Type}\r\n                            items={[\r\n                                {id: 'In', value: 'Дебет'},\r\n                                {id: 'Out', value: 'Кредит'},\r\n                            ]}\r\n                        />\r\n                    }\r\n                    \r\n                </Form.Field>\r\n\r\n                <Form.Field style={{display: 'flex', alignItems: 'flex-end', gap: '10px', marginBottom: '0'}}>\r\n                    <Form.Field>\r\n                        <label>Сума платежу:</label>\r\n                        {mode === 'create' ? \r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder='Сума...'\r\n                                {...register('sum', {\r\n                                    required: 'error value'\r\n                                })}\r\n                                min={1}\r\n                                max={1000000000}\r\n                            />\r\n                        :   \r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder={oldNote.Value}\r\n                                {...register('sum', {\r\n                                    required: false,\r\n                                })}\r\n                                min={1}\r\n                                max={1000000000}\r\n                            />\r\n                        }\r\n                        {errors.sum && <p className='error_message'>*Заповніть поле</p>}\r\n                    </Form.Field>\r\n\r\n                    <Form.Field>\r\n                        {mode === 'create' ? \r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={currency}\r\n                                setValue={setCurrency}\r\n                                placeholder=\"UAH\"\r\n                                items={[\r\n                                    { id: 'UAH', value: 'UAH' },\r\n                                    { id: 'USD', value: 'USD' },\r\n                                    { id: 'EUR', value: 'EUR' },\r\n                                    { id: 'GBP', value: 'GBP' },\r\n                                    { id: 'JPY', value: 'JPY' },\r\n                                    { id: 'CNY', value: 'CNY' },\r\n                                ]}\r\n                            /> :\r\n                            <DatalistInput\r\n                                style={{marginTop: '8px'}}\r\n                                value={currency}\r\n                                setValue={setCurrency}\r\n                                placeholder={oldNote.Currency}\r\n                                items={[\r\n                                    { id: 'UAH', value: 'UAH' },\r\n                                    { id: 'USD', value: 'USD' },\r\n                                    { id: 'EUR', value: 'EUR' },\r\n                                    { id: 'GBP', value: 'GBP' },\r\n                                    { id: 'JPY', value: 'JPY' },\r\n                                    { id: 'CNY', value: 'CNY' },\r\n                                ]}\r\n                            />\r\n                        }\r\n                        \r\n                        {errors.sum && <p className='error_message'>&nbsp;</p>}\r\n                    </Form.Field>\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                    <label>Сума  щомісячного платежу:</label>\r\n                    {mode === 'create' ? \r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder='Сума...'\r\n                            {...register('sumMonth', {\r\n                                required: 'error value'\r\n                            })}\r\n                            min={1}\r\n                            max={1000000000}\r\n                        />\r\n                    :   \r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder={oldNote.ValueMonth}\r\n                            {...register('sumMonth', {\r\n                                required: false,\r\n                            })}\r\n                            min={1}\r\n                            max={1000000000}\r\n                        />\r\n                    }\r\n                    {errors.sum && <p className='error_message'>*Заповніть поле</p>}\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                    <label>Дата щомісячного платежу:</label>\r\n                    {mode === 'create' ? \r\n                        <input  \r\n                            type=\"number\"\r\n                            placeholder='Дата...'\r\n                            {...register('dateMonth', {\r\n                                required: 'error dateMonth',\r\n                                max: 31,\r\n                                min: 1,\r\n                            })}\r\n                        />\r\n                    :\r\n                        <input  \r\n                            {...register('date', {\r\n                                required: false,\r\n                                max: 31,\r\n                                min: 1,\r\n                            })}\r\n                            placeholder={oldNote.DateMonth}\r\n                            type=\"number\"\r\n                        />\r\n                    }\r\n                    {errors.date && <p className='error_message'>*Заповніть поле</p>}\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                    <label>Дата кінцевого платежу:</label>\r\n                    {mode === 'create' ? \r\n                        <input  \r\n                            type=\"date\"\r\n                            {...register('date', {\r\n                                required: 'error date',\r\n                                max: `${dateObj.year + 5}-${dateObj.month}-${dateObj.day}`,\r\n                                min: `${dateObj.year - 5}-${dateObj.month}-${dateObj.day}`,\r\n                            })}\r\n                        />\r\n                    :\r\n                        <input  \r\n                            {...register('date', {\r\n                                required: false,\r\n                                max: `${dateObj.year + 5}-${dateObj.month}-${dateObj.day}`,\r\n                                min: `${dateObj.year - 5}-${dateObj.month}-${dateObj.day}`,\r\n                            })}\r\n                            placeholder={oldNote.Date}\r\n                            type=\"text\"\r\n                            onFocus={(e) => e.target.type='date'}\r\n                            onBlur={(e) => e.target.type = \"text\"}\r\n                        />\r\n                    }\r\n                    {errors.date && <p className='error_message'>*Заповніть поле</p>}\r\n                </Form.Field>\r\n\r\n                <Form.Field className='btns_field'>\r\n                    <Button className='non_active_btn' onClick={() => {setValue(''); openForm('back')}} type='reset'>Назад</Button>\r\n                    <Button className='sign-in_btn' type='submit'>{mode === 'create' ? 'Створити' : 'Зберегти' }</Button>\r\n                </Form.Field>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n  \r\nexport default LoanForm;"],"names":["oldNote","userData","openForm","mode","usersNoteId","useForm","register","reset","handleSubmit","formState","errors","isSubmitSuccessful","useComboboxControls","setValue","value","useState","currency","setCurrency","now","Date","month","getMonth","day","getDate","dateObj","String","length","year","getFullYear","db","child","id","once","elem","val","useEffect","date","sum","name","dateMonth","sumMonth","onSubmit","data","dateOfTrans","split","newDBObject","curr","nowObj","update","DateOfCreation","DateOfDBInput","DateMonth","Value","ValueMonth","Currency","Type","Name","PaidOut","className","type","placeholder","required","maxLength","items","style","display","alignItems","gap","marginBottom","min","max","marginTop","onFocus","e","target","onBlur","onClick"],"sourceRoot":""}